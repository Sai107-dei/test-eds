import {
  decorateBlock,
  decorateBlocks,
  decorateButtons,
  decorateIcons,
  decorateSections,
  loadBlock,
  loadSections,
} from './aem.js';
import { decorateRichtext } from './editor-support-rte.js';
import { decorateMain } from './scripts.js';

// Code Generated by Sidekick is for learning and experimentation purposes only.

async function addMetaTag() {
  const meta = document.createElement('meta');
  meta.name = "urn:adobe:aue:config:disable";
  meta.content = "publish";
  document.head.appendChild(meta);
}

async function getUserInfo() {
  const currentUserEndpoint = "/libs/cq/security/userinfo.json";
  const response = await fetch(currentUserEndpoint);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
}

async function getAuthorizables(userName) {
  const authorizablesEndpoint = `/bin/security/authorizables.json?filter=${encodeURIComponent(userName)}&_charset_=utf-8`;
  const response = await fetch(authorizablesEndpoint);
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
}

(async function() {
  try {
    const userInfo = await getUserInfo();
    const userName = userInfo.userName;
    console.log(`Username: ${userName}`);
    
    const authorizablesData = await getAuthorizables(userName);
    const isMember = authorizablesData.authorizables.some(authorizable => 
      authorizable.memberOf.some(group => group.id === "Prudential Super Authors")
    );

    if (isMember) {
      alert('Yes');
      alert('publish option disabled');
      addMetaTag();  // Call the addMetaTag function here
    }
  } catch (error) {
    console.error('Error fetching user information or authorizables data:', error);
  }
})();

function attachEventListners(main) {
  [
    'aue:content-patch',
    'aue:content-update',
    'aue:content-add',
    'aue:content-move',
    'aue:content-remove',
    'aue:content-copy',
  ].forEach((eventType) => main?.addEventListener(eventType, async (event) => {
    if (eventType === 'aue:content-add')  {
     
      return;
    }

    event.stopPropagation();
    const applied = await applyChanges(event);
    if (!applied) window.location.reload();
  }));
}



attachEventListners(document.querySelector('main'));
